{
 "cells": [
  {
   "cell_type": "markdown",
   "source": [
    "# Hands-on 1\n",
    "\n",
    "##Preliminart\n",
    "\n",
    "First of all, let's see if your qiskit installation is working. If not, please follow the instructions for installing qiskit in your own pc using _conda_, or run this book in the _IBM cloud_ directly."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "outputs": [
    {
     "data": {
      "text/plain": "<IPython.core.display.HTML object>",
      "text/html": "<h3>Version Information</h3><table><tr><th>Qiskit Software</th><th>Version</th></tr><tr><td><code>qiskit-terra</code></td><td>0.19.2</td></tr><tr><td><code>qiskit-aer</code></td><td>0.10.3</td></tr><tr><td><code>qiskit-ignis</code></td><td>0.7.0</td></tr><tr><td><code>qiskit-ibmq-provider</code></td><td>0.18.3</td></tr><tr><td><code>qiskit</code></td><td>0.34.2</td></tr><tr><td><code>qiskit-nature</code></td><td>0.3.1</td></tr><tr><td><code>qiskit-optimization</code></td><td>0.3.1</td></tr><tr><td><code>qiskit-machine-learning</code></td><td>0.3.1</td></tr><tr><th>System information</th></tr><tr><td>Python version</td><td>3.8.12</td></tr><tr><td>Python compiler</td><td>GCC 7.5.0</td></tr><tr><td>Python build</td><td>default, Oct 12 2021 13:49:34</td></tr><tr><td>OS</td><td>Linux</td></tr><tr><td>CPUs</td><td>12</td></tr><tr><td>Memory (Gb)</td><td>125.78773880004883</td></tr><tr><td colspan='2'>Thu Mar 17 03:18:50 2022 +03</td></tr></table>"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import qiskit.tools.jupyter\n",
    "%qiskit_version_table"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Exploring Qubits with Qiskit\n",
    "\n",
    "Classical bits always have a completely well-defined state: they are either 0 or 1 at every point during a computation. There is no more detail we can add to the state of a bit than this. So to write down the state of a of classical bit `(c)`, we can just use these two binary values. For example:\n",
    "\n",
    "$$\n",
    "c = 0\n",
    "$$\n",
    "\n",
    "This restriction is lifted for quantum bits. Whether we get a $0$ or a $1$ from a qubit only needs to be well-defined when a measurement is made to extract an output. At that point, it must commit to one of these two options. At all other times, its state will be something more complex than can be captured by a simple binary value.\n",
    "\n",
    "To see how to describe these, we can first focus on the two simplest cases. It is possible to prepare a qubit in a state for which it definitely gives the outcome $0$ when measured.\n",
    "\n",
    "We need a name for this state. Let's be unimaginative and call it *0*. Similarly, there exists a qubit state that is certain to output a $1$. We'll call this *1*. These two states are completely mutually exclusive. Either the qubit definitely outputs a $0$, or it definitely outputs a $1$. There is no overlap. One way to represent this with mathematics is to use two orthogonal vectors.\n",
    "\n",
    "$$\n",
    "\\left|0\\right\\rangle= \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix} \\qquad \\left|1\\right\\rangle= \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}\n",
    "$$\n",
    "\n",
    "With vectors we can describe more complex states than just $\\left|0\\right\\rangle$ and $\\left|1\\right\\rangle$. For example, consider the vector\n",
    "\n",
    "$$\n",
    "\\left|q_0\\right\\rangle= \\begin{pmatrix} \\frac{1}{\\sqrt{2}}  \\\\ \\frac{i}{\\sqrt{2}} \\end{pmatrix}\n",
    "$$\n",
    "\n",
    "Since the states $\\left|0\\right\\rangle$ and $\\left|1\\right\\rangle$ form an orthonormal basis, we can represent any 2D vector with a combination of these two states. This allows us to write the state of our qubit in the alternative form:\n",
    "\n",
    "$$\n",
    "\\left|q_0\\right\\rangle = \\frac{1}{\\sqrt{2}} \\left|0\\right\\rangle + \\frac{i}{\\sqrt{2}} \\left|1\\right\\rangle\n",
    "$$\n",
    "\n",
    "This vector, $\\left|q_0\\right\\rangle$ is called the qubit's _statevector_, it tells us everything we could possibly know about this qubit. For now, we are only able to draw a few simple conclusions about this particular example of a statevector: it is not entirely $\\left|0\\right\\rangle$ and not entirely $\\left|1\\right\\rangle$. Instead, it is described by a linear combination of the two. In quantum mechanics, we typically describe linear combinations such as this using the word 'superposition'.\n",
    "\n",
    "Though our example state $\\left|q_0\\right\\rangle$ can be expressed as a superposition of $\\left|0\\right\\rangle$ and $\\left|1\\right\\rangle$, it is no less a definite and well-defined qubit state than they are. To see this, we can begin to explore how a qubit can be manipulated"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "First, we need to import all the tools we will need:"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "outputs": [],
   "source": [
    "from qiskit import QuantumCircuit, assemble, Aer\n",
    "from qiskit.visualization import plot_histogram, plot_bloch_vector\n",
    "from math import sqrt, pi"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "In Qiskit, we use the `QuantumCircuit` object to store our circuits, this is essentially a list of the quantum operations on our circuit and the qubits they are applied to."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "outputs": [],
   "source": [
    "qc = QuantumCircuit(1) # Create a quantum circuit with one qubit"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "In our quantum circuits, our qubits always start out in the state $\\left|q_0\\right\\rangle$. We can use the `initialize()` method to transform this into any state. We give `initialize()` the vector we want in the form of a list, and tell it which qubit(s) we want to initialize in this state:"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 133.526x84.28 with 1 Axes>",
      "image/png": "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\n"
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qc = QuantumCircuit(1)  # Create a quantum circuit with one qubit\n",
    "initial_state = [0,1]   # Define initial_state as |1>\n",
    "qc.initialize(initial_state, 0) # Apply initialisation operation to the 0th qubit\n",
    "qc.draw('mpl')  # Let's view our circuit"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "We can then use one of Qiskitâ€™s simulators to view the resulting state of our qubit."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "outputs": [],
   "source": [
    "sim = Aer.get_backend('aer_simulator')  # Tell Qiskit how to simulate our circuit"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "To get the results from our circuit, we use run to execute our circuit, giving the circuit and the backend as arguments. We then use `.result()` to get the result of this:"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "outputs": [],
   "source": [
    "qc = QuantumCircuit(1)  # Create a quantum circuit with one qubit\n",
    "initial_state = [0,1]   # Define initial_state as |1>\n",
    "qc.initialize(initial_state, 0) # Apply initialisation operation to the 0th qubit\n",
    "qc.save_statevector()   # Tell simulator to save statevector\n",
    "qobj = assemble(qc)     # Create a Qobj from the circuit for the simulator to run\n",
    "result = sim.run(qobj).result() # Do the simulation and return the result"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "from result, we can then get the final statevector using `.get_statevector()`:"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Statevector([0.+0.j, 1.+0.j],\n",
      "            dims=(2,))\n"
     ]
    }
   ],
   "source": [
    "out_state = result.get_statevector()\n",
    "print(out_state) # Display the output state vector"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "*Note:* Python uses $j$ to represent $i$ in complex numbers. We see a vector with two complex elements: $0.+0.j = 0$, and $1.+0.j = 1$.\n",
    "\n",
    "Letâ€™s now measure our qubit as we would in a real quantum computer and see the result:"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 357.679x144.48 with 1 Axes>",
      "image/png": "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\n"
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qc.measure_all()\n",
    "qc.draw('mpl')"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "This time, instead of the statevector we will get the counts for the $0$ and $1$ results using `.get_counts()`:"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 504x360 with 1 Axes>",
      "image/png": "\n"
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qobj = assemble(qc)\n",
    "result = sim.run(qobj).result()\n",
    "counts = result.get_counts()\n",
    "plot_histogram(counts)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "We can see that we (unsurprisingly) have a 100% chance of measuring $\\left|1\\right\\rangle$. This time, letâ€™s instead put our qubit into a superposition and see what happens. We will use the state $\\left|q_0\\right\\rangle$ from earlier :\n",
    "\n",
    "$$\n",
    "\\left|q_0\\right\\rangle = \\frac{1}{\\sqrt{2}} \\left|0\\right\\rangle + \\frac{i}{\\sqrt{2}} \\left|1\\right\\rangle\n",
    "$$\n",
    "\n",
    "We need to add these amplitudes to a python list. To add a complex amplitude, Python uses $j$ for the imaginary unit (we normally call it $i$ mathematically):"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "outputs": [],
   "source": [
    "initial_state = [1/sqrt(2), 1j/sqrt(2)]  # Define state |q_0>"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "And we then repeat the steps for initialising the qubit as before:"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Statevector([0.70710678+0.j        , 0.        +0.70710678j],\n",
      "            dims=(2,))\n"
     ]
    }
   ],
   "source": [
    "qc = QuantumCircuit(1) # Must redefine qc\n",
    "qc.initialize(initial_state, 0) # Initialize the 0th qubit in the state `initial_state`\n",
    "qc.save_statevector() # Save statevector\n",
    "qobj = assemble(qc)\n",
    "state = sim.run(qobj).result().get_statevector() # Execute the circuit\n",
    "print(state)           # Print the result"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 504x360 with 1 Axes>",
      "image/png": "\n"
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qobj = assemble(qc)\n",
    "results = sim.run(qobj).result().get_counts()\n",
    "plot_histogram(results)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "We can see we have equal probability of measuring either $\\left|0\\right\\rangle$ or $\\left|1\\right\\rangle$. To explain this, we need to talk about measurement."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "##  The Rules of Measurement\n",
    "\n",
    "Remember: To find the probability of measuring a state $\\left|\\psi\\right\\rangle$ in the state $\\left|x\\right\\rangle$ we do:\n",
    "\n",
    "$$\n",
    "p\\left(\\left|x\\right\\rangle\\right)=\\left|\\left\\langle x\\middle|\\psi\\right\\rangle\\right|^2\n",
    "$$\n",
    "\n",
    "In the equation above, $\\left|x\\right\\rangle\\right$ can be any qubit state. To find the probability of measuring $\\left|x\\right\\rangle\\right$, we take the inner product of $\\left|x\\right\\rangle\\right$ and the state we are measuring (in this case $\\left|\\psi\\right\\rangle\\right$), then square the magnitude. This may seem a little convoluted, but it will soon become second nature.\n",
    "\n",
    "If we look at the state $\\left|q_0\\right\\rangle\\right$ from before, we can see the probability of measuring $\\left|0\\right\\rangle\\right$ is indeed $0.5$ :\n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "\\left|q_0\\right\\rangle &= \\frac{1}{\\sqrt{2}} \\left|0\\right\\rangle + \\frac{i}{\\sqrt{2}} \\left|1\\right\\rangle \\\\\n",
    "\\left\\langle 0 \\middle|q_0\\right\\rangle &= \\frac{1}{\\sqrt{2}} \\left\\langle 0 \\middle|0\\right\\rangle + \\frac{i}{\\sqrt{2}} \\left\\langle 0 \\middle|1\\right\\rangle \\\\\n",
    "&=\\frac{1}{\\sqrt{2}}\\\\\n",
    "\n",
    "\\left|\\left\\langle 0 \\middle|q_0\\right\\rangle\\right|^2 &=\\frac{1}{2}\n",
    "\\end{align}\n",
    "$$\n",
    "\n",
    "This rule governs how we get information out of quantum states. It is therefore very important for everything we do in quantum computation. It also immediately implies several important facts"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "#### Normalisation\n",
    "\n",
    "The rule shows us that amplitudes are related to probabilities. If we want the probabilities to add up to 1 (which they should!), we need to ensure that the statevector is properly normalized. Specifically, we need the magnitude of the state vector to be 1.\n",
    "\n",
    "$$\n",
    "\\left\\langle \\psi \\middle|\\psi\\right\\rangle=1\n",
    "$$\n",
    "\n",
    "Thus if:\n",
    "\n",
    "$$\n",
    "\\left|\\psi\\right\\rangle = \\alpha \\left|0\\right\\rangle + \\beta \\left|1\\right\\rangle\n",
    "$$\n",
    "\n",
    "Then:\n",
    "\n",
    "$$\n",
    "\\left|\\alpha\\right|^2+\\left|\\beta\\right|^2=1\n",
    "$$\n",
    "\n",
    "This explains the factors of $\\sqrt{2}$ you have seen throughout this hands-on. In fact, if we try to give `initialize()` a vector that isnâ€™t normalised, it will give us an error:"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "outputs": [
    {
     "ename": "QiskitError",
     "evalue": "'Sum of amplitudes-squared does not equal one.'",
     "output_type": "error",
     "traceback": [
      "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[0;31mQiskitError\u001B[0m                               Traceback (most recent call last)",
      "Input \u001B[0;32mIn [14]\u001B[0m, in \u001B[0;36m<cell line: 2>\u001B[0;34m()\u001B[0m\n\u001B[1;32m      1\u001B[0m vector \u001B[38;5;241m=\u001B[39m [\u001B[38;5;241m1\u001B[39m,\u001B[38;5;241m1\u001B[39m]\n\u001B[0;32m----> 2\u001B[0m \u001B[43mqc\u001B[49m\u001B[38;5;241;43m.\u001B[39;49m\u001B[43minitialize\u001B[49m\u001B[43m(\u001B[49m\u001B[43mvector\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[38;5;241;43m0\u001B[39;49m\u001B[43m)\u001B[49m\n",
      "File \u001B[0;32m~/Prog/miniconda3/envs/qiskit/lib/python3.8/site-packages/qiskit/extensions/quantum_initializer/initializer.py:459\u001B[0m, in \u001B[0;36minitialize\u001B[0;34m(self, params, qubits)\u001B[0m\n\u001B[1;32m    456\u001B[0m     qubits \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39m_bit_argument_conversion(qubits, \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mqubits)\n\u001B[1;32m    458\u001B[0m num_qubits \u001B[38;5;241m=\u001B[39m \u001B[38;5;28;01mNone\u001B[39;00m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m \u001B[38;5;28misinstance\u001B[39m(params, \u001B[38;5;28mint\u001B[39m) \u001B[38;5;28;01melse\u001B[39;00m \u001B[38;5;28mlen\u001B[39m(qubits)\n\u001B[0;32m--> 459\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mappend(\u001B[43mInitialize\u001B[49m\u001B[43m(\u001B[49m\u001B[43mparams\u001B[49m\u001B[43m,\u001B[49m\u001B[43m \u001B[49m\u001B[43mnum_qubits\u001B[49m\u001B[43m)\u001B[49m, qubits)\n",
      "File \u001B[0;32m~/Prog/miniconda3/envs/qiskit/lib/python3.8/site-packages/qiskit/extensions/quantum_initializer/initializer.py:94\u001B[0m, in \u001B[0;36mInitialize.__init__\u001B[0;34m(self, params, num_qubits)\u001B[0m\n\u001B[1;32m     92\u001B[0m     \u001B[38;5;66;03m# Check if probabilities (amplitudes squared) sum to 1\u001B[39;00m\n\u001B[1;32m     93\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;129;01mnot\u001B[39;00m math\u001B[38;5;241m.\u001B[39misclose(\u001B[38;5;28msum\u001B[39m(np\u001B[38;5;241m.\u001B[39mabsolute(params) \u001B[38;5;241m*\u001B[39m\u001B[38;5;241m*\u001B[39m \u001B[38;5;241m2\u001B[39m), \u001B[38;5;241m1.0\u001B[39m, abs_tol\u001B[38;5;241m=\u001B[39m_EPS):\n\u001B[0;32m---> 94\u001B[0m         \u001B[38;5;28;01mraise\u001B[39;00m QiskitError(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mSum of amplitudes-squared does not equal one.\u001B[39m\u001B[38;5;124m\"\u001B[39m)\n\u001B[1;32m     96\u001B[0m     num_qubits \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mint\u001B[39m(num_qubits)\n\u001B[1;32m     98\u001B[0m \u001B[38;5;28msuper\u001B[39m()\u001B[38;5;241m.\u001B[39m\u001B[38;5;21m__init__\u001B[39m(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124minitialize\u001B[39m\u001B[38;5;124m\"\u001B[39m, num_qubits, \u001B[38;5;241m0\u001B[39m, params)\n",
      "\u001B[0;31mQiskitError\u001B[0m: 'Sum of amplitudes-squared does not equal one.'"
     ]
    }
   ],
   "source": [
    "vector = [1,1]\n",
    "qc.initialize(vector, 0)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "#### In class exercise\n",
    "1. Create a state vector that will give a 1/3 probability of measuring $\\left|0\\right\\rangle$.\n",
    "2. Create a different state vector that will give the same measurement probabilities.\n",
    "3. Verify that the probability of measuring \\left|1\\right\\rangle for these two states is 2/3."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "outputs": [],
   "source": [
    "##Fill me"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "#### Alternative measurement\n",
    "The measurement rule gives us the probability $p\\left(\\left|x\\right\\rangle\\right)$ that a state $\\left|\\psi\\right\\rangle$ is measured as $\\left|x\\right\\rangle$. Nowhere does it tell us that $\\left|x\\right\\rangle$ can only be either $\\left|0\\right\\rangle$ or $\\left|1\\right\\rangle$.\n",
    "\n",
    "The measurements we have considered so far are in fact only one of an infinite number of possible ways to measure a qubit. For any orthogonal pair of states, we can define a measurement that would cause a qubit to choose between the two.\n",
    "\n",
    "This possibility will be explored more in the next section. For now, just bear in mind that $\\left|x\\right\\rangle$ is not limited to being simply $\\left|0\\right\\rangle$ or $\\left|1\\right\\rangle$."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "#### Global Phase\n",
    "We know that measuring the state $\\left|1\\right\\rangle$  will give us the output $1$ with certainty. But we are also able to write down states such as\n",
    "\n",
    "$$\n",
    "\\begin{pmatrix} 0 \\\\ i \\end{pmatrix}=i\\left|1\\right\\rangle.\n",
    "$$\n",
    "\n",
    "To see how this behaves, we apply the measurement rule.\n",
    "\n",
    "$$\n",
    "\\left|\\left\\langle x \\right| \\left(i \\left|1\\right\\rangle\\right)\\right|^2=\\left|i\\left\\langle x\\middle|1\\right\\rangle\\right|^2=\\left|\\left\\langle x\\middle|1\\right\\rangle\\right|^2\n",
    "$$\n",
    "\n",
    "Here we find that the factor of $i$ disappears once we take the magnitude of the complex number. This effect is completely independent of the measured state $\\left|x\\right\\rangle$. It does not matter what measurement we are considering, the probabilities for the state $i\\left|1\\right\\rangle$ are identical to those for $\\left|1\\right\\rangle$. Since measurements are the only way we can extract any information from a qubit, this implies that these two states are equivalent in all ways that are physically relevant.\n",
    "\n",
    "More generally, we refer to any overall factor $\\gamma$ on a state for which $\\left|\\gamma\\right|=1$ as a 'global phase'. States that differ only by a global phase are physically indistinguishable.\n",
    "\n",
    "$$\n",
    "\\left|\\left\\langle x \\right| \\left(\\gamma \\left|\\alpha\\right\\rangle\\right)\\right|^2=\\left|\\gamma\\left\\langle x\\middle|\\alpha\\right\\rangle\\right|^2=\\left|\\left\\langle x\\middle|\\alpha\\right\\rangle\\right|^2\n",
    "$$\n",
    "\n",
    "Note that this is distinct from the phase difference between terms in a superposition, which is known as the 'relative phase'. This becomes relevant once we consider different types of measurement and multiple qubits.\n",
    "\n"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "##### The Observer Effect\n",
    "\n",
    "We know that the amplitudes contain information about the probability of us finding the qubit in a specific state, but once we have measured the qubit, we know with certainty what the state of the qubit is. For example, if we measure a qubit in the state:\n",
    "\n",
    "$$\n",
    "\\left|q\\right\\rangle = \\alpha \\left|0\\right\\rangle + \\beta \\left|1\\right\\rangle\n",
    "$$\n",
    "\n",
    "And find it in the state $\\left|0\\right\\rangle$, if we measure again, there is a 100% chance of finding the qubit in the state $\\left|0\\right\\rangle$. This means the act of measuring changes the state of our qubits.\n",
    "\n",
    "$$\n",
    "\\left|q\\right\\rangle=\\begin{pmatrix} \\alpha \\\\ \\beta \\end{pmatrix} \\xrightarrow{\\text{Measure } \\left|0\\right\\rangle} \\left|q\\right\\rangle=\\left|0\\right\\rangle=\\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\n",
    "$$\n",
    "\n",
    "We sometimes refer to this as collapsing the state of the qubit. It is a potent effect, and so one that must be used wisely. For example, were we to constantly measure each of our qubits to keep track of their value at each point in a computation, they would always simply be in a well-defined state of either $\\left|0\\right\\rangle$ or $\\left|1\\right\\rangle$. As such, they would be no different from classical bits and our computation could be easily replaced by a classical computation. To achieve truly quantum computation we must allow the qubits to explore more complex states. Measurements are therefore only used when we need to extract an output. This means that we often place all the measurements at the end of our quantum circuit.\n",
    "\n",
    "We can demonstrate this using Qiskitâ€™s statevector simulator. Let's initialize a qubit in superposition:"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 193.726x84.28 with 1 Axes>",
      "image/png": "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\n"
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qc = QuantumCircuit(1) # We are redefining qc\n",
    "initial_state = [0.+1.j/sqrt(2),1/sqrt(2)+0.j]\n",
    "qc.initialize(initial_state, 0)\n",
    "qc.draw('mpl')"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "This should initialize our qubit in the state:\n",
    "\n",
    "$$\n",
    "\\left|q_0\\right\\rangle = \\frac{i}{\\sqrt{2}} \\left|0\\right\\rangle + \\frac{1}{\\sqrt{2}} \\left|1\\right\\rangle\n",
    "$$\n",
    "\n",
    "We can verify this using the simulator:"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Qubit State = Statevector([0.        +0.70710678j, 0.70710678+0.j        ],\n",
      "            dims=(2,))\n"
     ]
    }
   ],
   "source": [
    "qc.save_statevector()\n",
    "result = sim.run(assemble(qc)).result()\n",
    "state = result.get_statevector()\n",
    "print(\"Qubit State = \" + str(state))"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "We can see here the qubit is initialized in the state [0.+0.70710678j 0.70710678+0.j], which is the state we expected.\n",
    "\n",
    "Letâ€™s now create a circuit where we measure this qubit"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 417.879x144.48 with 1 Axes>",
      "image/png": "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\n"
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qc = QuantumCircuit(1) # We are redefining qc\n",
    "initial_state = [0.+1.j/sqrt(2),1/sqrt(2)+0.j]\n",
    "qc.initialize(initial_state, 0)\n",
    "qc.measure_all()\n",
    "qc.save_statevector()\n",
    "qc.draw('mpl')"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "When we simulate this entire circuit, we can see that one of the amplitudes is always $0$:"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "State of Measured Qubit = Statevector([0.+0.j, 1.+0.j],\n",
      "            dims=(2,))\n"
     ]
    }
   ],
   "source": [
    "qobj = assemble(qc)\n",
    "state = sim.run(qobj).result().get_statevector()\n",
    "print(\"State of Measured Qubit = \" + str(state))"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "You can re-run this cell a few times to reinitialize the qubit and measure it again. You will notice that either outcome is equally probable, but that the state of the qubit is never a superposition of $\\left|0\\right\\rangle$ and $\\left|1\\right\\rangle$. Somewhat interestingly, the global phase on the state $\\left|0\\right\\rangle$ survives, but since this is global phase, we can never measure it on a real quantum computer."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "#### A Note about Quantum Simulators\n",
    "\n",
    "We can see that writing down a qubitâ€™s state requires keeping track of two complex numbers, but when using a real quantum computer we will only ever receive a yes-or-no (0 or 1) answer for each qubit. The output of a 10-qubit quantum computer will look like this:\n",
    "\n",
    "$$\n",
    "0110111110\n",
    "$$\n",
    "\n",
    "Just 10 bits, no superposition or complex amplitudes. When using a real quantum computer, we cannot see the states of our qubits mid-computation, as this would destroy them! This behaviour is not ideal for learning, so Qiskit provides different quantum simulators: By default, the `aer_simulator` mimics the execution of a real quantum computer, but will also allow you to peek at quantum states before measurement if we include certain instructions in our circuit. For example, here we have included the instruction `.save_statevector()`, which means we can use `.get_statevector()` on the result of the simulation."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## The Bloch Sphere\n",
    "\n",
    "We saw earlier in this chapter that the general state of a qubit $\\left|q\\right\\rangle$ is:\n",
    "\n",
    "$$\n",
    "\\left|q\\right\\rangle = \\alpha \\left|0\\right\\rangle + \\beta \\left|1\\right\\rangle \\\\\n",
    "\\alpha,\\beta \\in \\mathbb C\n",
    "$$\n",
    "\n",
    "(The second line tells us $\\alpha$ and $\\beta$ are complex numbers). We know that we cannot differentiate between some of these states. This means we can be more specific in our description of the qubit.\n",
    "\n",
    "Firstly, since we cannot measure global phase, we can only measure the difference in phase between the states $\\left|0\\right\\rangle$ and $\\left|1\\right\\rangle$. Instead of having $\\alpha$ and $\\beta$ be complex, we can confine them to the real numbers and add a term to tell us the relative phase between them:\n",
    "\n",
    "$$\n",
    "\\left|q\\right\\rangle = \\alpha \\left|0\\right\\rangle + e^{i\\phi}\\beta \\left|1\\right\\rangle \\\\\n",
    "\\alpha,\\beta,\\phi \\in \\mathbb R\n",
    "$$\n",
    "\n",
    "Finally, since the qubit state must be normalised, i.e.\n",
    "\n",
    "$$\n",
    "\\sqrt{\\alpha^2+\\beta^2}=1\n",
    "$$\n",
    "\n",
    "we can use the trigonometric identity:\n",
    "\n",
    "$$\n",
    "\\sqrt{\\sin^2 x+\\cos^2 x}=1\n",
    "$$\n",
    "\n",
    "to describe the real $\\alpha$ and $\\beta$ in terms of one variable, $\\theta$ :\n",
    "\n",
    "$$\n",
    "\\alpha=\\cos\\frac{\\theta}{2}\\qquad \\beta=\\sin\\frac{\\theta}{2}\n",
    "$$\n",
    "\n",
    "From this we can describe the state of any qubit using the two variables $\\phi$ and $\\theta$ :\n",
    "\n",
    "$$\n",
    "\\left|q\\right\\rangle = \\cos\\frac{\\theta}{2} \\left|0\\right\\rangle + e^{i\\phi}\\sin\\frac{\\theta}{2} \\left|1\\right\\rangle \\\\\n",
    "\\theta,\\phi \\in \\mathbb R\n",
    "$$\n",
    "\n",
    "If we interpret $\\phi$ and $\\theta$ as spherical co-ordinates ($r=1$, since the magnitude of the qubit state is 1), we can plot any single qubit state on the surface of a sphere, known as the _Bloch sphere_.\n",
    "\n",
    "Below we have plotted a qubit in the state $\\left|+\\right\\rangle$. In this case, $\\theta=\\pi/2$ and $\\phi=0$."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 360x360 with 1 Axes>",
      "image/png": "\n"
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plot_bloch_vector(bloch=[1,pi/2,0],title='example',coord_type='spherical')"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## In Class Exercise\n",
    "\n",
    "Use `plot_bloch_vector()` to plot a qubit in the states:\n",
    "\n",
    "1. $\\left|0\\right\\rangle$\n",
    "2. $\\left|1\\right\\rangle$\n",
    "3. $\\frac{1}{\\sqrt 2}\\left(\\left|0\\right\\rangle+\\left|1\\right\\rangle\\right)$\n",
    "4. $\\frac{1}{\\sqrt 2}\\left(\\left|0\\right\\rangle-i\\left|1\\right\\rangle\\right)$\n",
    "5. $\\frac{1}{\\sqrt 2} \\begin{pmatrix} i \\\\ 1 \\end{pmatrix} $"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "### Fill me"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Your first multi-qubit quantum circuit\n",
    "\n",
    "In a circuit, we typically need to do three jobs: First, encode the input, then do some actual computation, and finally extract an output. For your first quantum circuit, we'll focus on the last of these jobs. We start by creating a quantum circuit with 3 qubits and 3 outputs. Finally the method qc.draw() creates a drawing of the circuit for us. Jupyter Notebooks evaluate the last line of a code cell and display it below the cell. Since `qc.draw()` returns a drawing, thatâ€™s what weâ€™re seeing under the code. There are no gates in our circuit yet, so we just see some horizontal lines.  (_Return_ is another word for 'output'. In Python, we can use returned data as input to another function or process.)"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from qiskit import QuantumCircuit\n",
    "# Create quantum circuit with 3 qubits and 3 classical bits\n",
    "# (we'll explain why we need the classical bits later)\n",
    "qc = QuantumCircuit(3, 3)\n",
    "qc.draw(output='mpl')  # returns a drawing of the circuit"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "#### What's a method?\n",
    "The `QuantumCircuit` class is a set of instructions for representing quantum circuits as bits, but when we want to change one of these circuits, we also need to know how to change the bits accordingly. In Python, objects come with â€˜methodsâ€™, which are sets of instructions for doing something with that object. In the cell above, the `.draw()` method looks at the circuit weâ€™ve created and produces a human-readable drawing of that circuit."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Next, we need a way to tell our quantum computer to measure our qubits and record the results. To do this, we add a \"measure\" operation to our quantum circuit. We can do this with the `QuantumCircuit`'s `.measure()` method."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "# measure qubits 0, 1 & 2 to classical bits 0, 1 & 2 respectively\n",
    "qc.measure([0,1,2], [0,1,2])\n",
    "qc.draw(output='mpl')"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Next, let's see what the results of running this circuit would be. To do this, we'll use a quantum simulator, which is a standard computer calculating what an ideal quantum computer would do. Because simulating a quantum computer is believed to be difficult for classical computers (the best algorithms we have grow exponentially with the number of qubits), these simulations are only possible for circuits with small numbers of qubits (up to ~30 qubits), or certain types of circuits for which we can use some tricks to speed up the simulation. Simulators are very useful tools for designing smaller quantum circuits.\n",
    "\n",
    "Let's import Qiskitâ€™s simulator (called Aer), and make a new simulator object."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "from qiskit.providers.aer import AerSimulator\n",
    "sim = AerSimulator()  # make new simulator object"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "To do the simulation, we can use the simulators `.run()` method. This returns a \"job\", which contains information about the experiment, such as whether the experiment is running or completed, what backend we ran the experiment on, and importantly for us, what the results of the experiment are!\n",
    "\n",
    "To get the results from the job, we use the results method, and the most popular way to view the results is as a dictionary of \"counts\"."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "job = sim.run(qc)      # run the experiment\n",
    "result = job.result()  # get the results\n",
    "counts = result.get_counts()    # interpret the results as a \"counts\" dictionary\n",
    "print(counts)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "The keys in counts dictionary are bit-strings, and the values are the number of times that bit-string was measured. Quantum computers can have randomness in their results, so it's common to repeat the circuit a few times. This circuit was repeated 1024 times, which is the default number of times to repeat a circuit in Qiskit. By convention, qubits always start in the state 0, and since we are doing nothing to them before measurement, the results are always `0`. This is not always the case. In actual situations, you will need a statistical method to analyse the output. Qiskit also provides a function `plot_histogram`, which allows you to view the outcomes."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "from qiskit.visualization import plot_histogram\n",
    "plot_histogram(counts)\n"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Basics of encoding an input\n",
    "\n",
    "Now let's look at how to encode a different binary string as an input. For this, we need what is known as a NOT gate. This is the most basic operation that you can do in a computer. It simply flips the bit value: 0 becomes 1 and 1 becomes 0. For qubits, we use a gate known as the _X-gate_ for this.\n",
    "\n",
    "Below, weâ€™ll create a new circuit dedicated to the job of encoding:"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "# Create quantum circuit with 3 qubits and 3 classical bits:\n",
    "qc = QuantumCircuit(3, 3)\n",
    "qc.x([0,1])  # Perform X-gates on qubits 0 & 1\n",
    "qc.measure([0,1,2], [0,1,2])\n",
    "qc.draw('mpl')    # returns a drawing of the circuit"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "And let's simulate our circuit to see the results:"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "job = sim.run(qc)      # run the experiment\n",
    "result = job.result()  # get the results\n",
    "counts=result.get_counts()    # interpret the results as a \"counts\" dictionary\n",
    "print(counts)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "plot_histogram(counts)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}